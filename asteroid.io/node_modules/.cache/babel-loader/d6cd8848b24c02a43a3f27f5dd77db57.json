{"ast":null,"code":"let canvas;\nlet ctx;\nlet canvasWidth = window.innerWidth;\nlet canvasHeight = window.innerHeight;\nlet keys = [];\nlet ship;\nlet bullets = [];\nlet asteroids = [];\nlet score = 0;\nlet lives = 3;\nlet highScore;\nlet localStorageName = \"HighScore\";\ndocument.addEventListener('DOMContentLoaded', SetupCanvas);\n\nfunction SetupCanvas() {\n  canvas = document.getElementById(\"my-canvas\");\n  ctx = canvas.getContext(\"2d\");\n  canvas.width = canvasWidth;\n  canvas.height = canvasHeight;\n  ctx.fillStyle = \"black\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ship = new Ship();\n\n  for (let i = 0; i < 8; i++) {\n    asteroids.push(new Asteroid());\n  }\n\n  document.body.addEventListener(\"keydown\", HandleKeyDown);\n  document.body.addEventListener(\"keyup\", HandleKeyUp); // Retrieves locally stored high scores\n\n  if (localStorage.getItem(localStorageName) == null) {\n    highScore = 0;\n  } else {\n    highScore = localStorage.getItem(localStorageName);\n  }\n\n  Render();\n}\n\nfunction HandleKeyDown(e) {\n  keys[e.keyCode] = true;\n}\n\nfunction HandleKeyUp(e) {\n  keys[e.keyCode] = false;\n\n  if (e.keyCode === 32) {\n    bullets.push(new Bullet(ship.angle));\n  }\n}\n\nclass Ship {\n  constructor() {\n    this.visible = true;\n    this.x = canvasWidth / 2;\n    this.y = canvasHeight / 2;\n    this.movingForward = false;\n    this.speed = 0.1;\n    this.velX = 0;\n    this.velY = 0;\n    this.rotateSpeed = 0.001;\n    this.radius = 15;\n    this.angle = 0;\n    this.strokeColor = 'white'; // Used to know where to fire the bullet from\n\n    this.noseX = canvasWidth / 2 + 15;\n    this.noseY = canvasHeight / 2;\n  }\n\n  Rotate(dir) {\n    this.angle += this.rotateSpeed * dir;\n  }\n\n  Update() {\n    // Get current direction ship is facing\n    let radians = this.angle / Math.PI * 180; // If moving forward calculate changing values of x & y\n    // If you want to find the new point x use the \n    // formula oldX + cos(radians) * distance\n    // Forumla for y oldY + sin(radians) * distance\n\n    if (this.movingForward) {\n      this.velX += Math.cos(radians) * this.speed;\n      this.velY += Math.sin(radians) * this.speed;\n    } // If ship goes off board place it on the opposite\n    // side    \n\n\n    if (this.x < this.radius) {\n      this.x = canvas.width;\n    }\n\n    if (this.x > canvas.width) {\n      this.x = this.radius;\n    }\n\n    if (this.y < this.radius) {\n      this.y = canvas.height;\n    }\n\n    if (this.y > canvas.height) {\n      this.y = this.radius;\n    } // Slow ship speed when not holding key\n\n\n    this.velX *= 0.99;\n    this.velY *= 0.99; // Change value of x & y while accounting for\n    // air friction    \n\n    this.x -= this.velX;\n    this.y -= this.velY;\n  }\n\n  Draw() {\n    ctx.strokeStyle = this.strokeColor;\n    ctx.beginPath(); // Angle between vertices of the ship\n\n    let vertAngle = Math.PI * 2 / 3;\n    let radians = this.angle / Math.PI * 180; // Where to fire bullet from\n\n    this.noseX = this.x - this.radius * Math.cos(radians);\n    this.noseY = this.y - this.radius * Math.sin(radians);\n\n    for (let i = 0; i < 3; i++) {\n      ctx.lineTo(this.x - this.radius * Math.cos(vertAngle * i + radians), this.y - this.radius * Math.sin(vertAngle * i + radians));\n    }\n\n    ctx.closePath();\n    ctx.stroke();\n  }\n\n}\n\nclass Bullet {\n  constructor(angle) {\n    this.visible = true;\n    this.x = ship.noseX;\n    this.y = ship.noseY;\n    this.angle = angle;\n    this.height = 4;\n    this.width = 4;\n    this.speed = 5;\n    this.velX = 0;\n    this.velY = 0;\n  }\n\n  Update() {\n    let radians = this.angle / Math.PI * 180;\n    this.x -= Math.cos(radians) * this.speed;\n    this.y -= Math.sin(radians) * this.speed;\n  }\n\n  Draw() {\n    ctx.fillStyle = 'white';\n    ctx.fillRect(this.x, this.y, this.width, this.height);\n  }\n\n}\n\nclass Asteroid {\n  constructor(x, y, radius, level, collisionRadius) {\n    this.visible = true;\n    this.x = x || Math.floor(Math.random() * canvasWidth);\n    this.y = y || Math.floor(Math.random() * canvasHeight);\n    this.speed = 1;\n    this.radius = radius || 50;\n    this.angle = Math.floor(Math.random() * 359);\n    this.strokeColor = 'white';\n    this.collisionRadius = collisionRadius || 46; // Used to decide if this asteroid can be broken into smaller pieces\n\n    this.level = level || 1;\n  }\n\n  Update() {\n    let radians = this.angle / Math.PI * 180;\n    this.x += Math.cos(radians) * this.speed;\n    this.y += Math.sin(radians) * this.speed;\n\n    if (this.x < this.radius) {\n      this.x = canvas.width;\n    }\n\n    if (this.x > canvas.width) {\n      this.x = this.radius;\n    }\n\n    if (this.y < this.radius) {\n      this.y = canvas.height;\n    }\n\n    if (this.y > canvas.height) {\n      this.y = this.radius;\n    }\n  }\n\n  Draw() {\n    ctx.beginPath();\n    let vertAngle = Math.PI * 2 / 6;\n    var radians = this.angle / Math.PI * 180;\n\n    for (let i = 0; i < 6; i++) {\n      ctx.lineTo(this.x - this.radius * Math.cos(vertAngle * i + radians), this.y - this.radius * Math.sin(vertAngle * i + radians));\n    }\n\n    ctx.closePath();\n    ctx.stroke();\n  }\n\n}\n\nfunction CircleCollision(p1x, p1y, r1, p2x, p2y, r2) {\n  let radiusSum;\n  let xDiff;\n  let yDiff;\n  radiusSum = r1 + r2;\n  xDiff = p1x - p2x;\n  yDiff = p1y - p2y;\n\n  if (radiusSum > Math.sqrt(xDiff * xDiff + yDiff * yDiff)) {\n    return true;\n  } else {\n    return false;\n  }\n} // Handles drawing life ships on screen\n\n\nfunction DrawLifeShips() {\n  let startX = 1350;\n  let startY = 10;\n  let points = [[9, 9], [-9, 9]];\n  ctx.strokeStyle = 'white'; // Stroke color of ships\n  // Cycle through all live ships remaining\n\n  for (let i = 0; i < lives; i++) {\n    // Start drawing ship\n    ctx.beginPath(); // Move to origin point\n\n    ctx.moveTo(startX, startY); // Cycle through all other points\n\n    for (let j = 0; j < points.length; j++) {\n      ctx.lineTo(startX + points[j][0], startY + points[j][1]);\n    } // Draw from last point to 1st origin point\n\n\n    ctx.closePath(); // Stroke the ship shape white\n\n    ctx.stroke(); // Move next shape 30 pixels to the left\n\n    startX -= 30;\n  }\n}\n\nfunction Render() {\n  // Check if the ship is moving forward\n  ship.movingForward = keys[87];\n\n  if (keys[68]) {\n    // d key rotate right\n    ship.Rotate(1);\n  }\n\n  if (keys[65]) {\n    // a key rotate left\n    ship.Rotate(-1);\n  }\n\n  ctx.clearRect(0, 0, canvasWidth, canvasHeight); // Display score\n\n  ctx.fillStyle = 'white';\n  ctx.font = '21px Arial';\n  ctx.fillText(\"SCORE : \" + score.toString(), 20, 35); // If no lives signal game over\n\n  if (lives <= 0) {\n    // If Game over remove event listeners to stop getting keyboard input\n    document.body.removeEventListener(\"keydown\", HandleKeyDown);\n    document.body.removeEventListener(\"keyup\", HandleKeyUp);\n    ship.visible = false;\n    ctx.fillStyle = 'white';\n    ctx.font = '50px Arial';\n    ctx.fillText(\"GAME OVER\", canvasWidth / 2 - 150, canvasHeight / 2);\n  }\n\n  if (asteroids.length === 0) {\n    ship.x = canvasWidth / 2;\n    ship.y = canvasHeight / 2;\n    ship.velX = 0;\n    ship.velY = 0;\n\n    for (let i = 0; i < 8; i++) {\n      let asteroid = new Asteroid();\n      asteroid.speed += .5;\n      asteroids.push(asteroid);\n    }\n  }\n\n  DrawLifeShips(); // collision of ship with asteroid\n\n  if (asteroids.length !== 0) {\n    for (let k = 0; k < asteroids.length; k++) {\n      if (CircleCollision(ship.x, ship.y, 11, asteroids[k].x, asteroids[k].y, asteroids[k].collisionRadius)) {\n        ship.x = canvasWidth / 2;\n        ship.y = canvasHeight / 2;\n        ship.velX = 0;\n        ship.velY = 0;\n        lives -= 1;\n      }\n    }\n  } //collision with bullet and asteroid\n\n\n  if (asteroids.length !== 0 && bullets.length != 0) {\n    loop1: for (let l = 0; l < asteroids.length; l++) {\n      for (let m = 0; m < bullets.length; m++) {\n        if (CircleCollision(bullets[m].x, bullets[m].y, 3, asteroids[l].x, asteroids[l].y, asteroids[l].collisionRadius)) {\n          // Check if asteroid can be broken into smaller pieces\n          if (asteroids[l].level === 1) {\n            asteroids.push(new Asteroid(asteroids[l].x - 5, asteroids[l].y - 5, 25, 2, 22));\n            asteroids.push(new Asteroid(asteroids[l].x + 5, asteroids[l].y + 5, 25, 2, 22));\n          } else if (asteroids[l].level === 2) {\n            asteroids.push(new Asteroid(asteroids[l].x - 5, asteroids[l].y - 5, 15, 3, 12));\n            asteroids.push(new Asteroid(asteroids[l].x + 5, asteroids[l].y + 5, 15, 3, 12));\n          }\n\n          asteroids.splice(l, 1);\n          bullets.splice(m, 1);\n          score += 20; // Used to break out of loops because splicing arrays\n          // you are looping through will break otherwise\n\n          break loop1;\n        }\n      }\n    }\n  }\n\n  if (ship.visible) {\n    ship.Update();\n    ship.Draw();\n  }\n\n  if (bullets.length !== 0) {\n    for (let i = 0; i < bullets.length; i++) {\n      bullets[i].Update();\n      bullets[i].Draw();\n    }\n  }\n\n  if (asteroids.length !== 0) {\n    for (let j = 0; j < asteroids.length; j++) {\n      asteroids[j].Update();\n      asteroids[j].Draw(j);\n    }\n  } // Updates the high score using local storage\n\n\n  highScore = Math.max(score, highScore);\n  localStorage.setItem(localStorageName, highScore);\n  ctx.font = '21px Arial';\n  ctx.fillText(\"HIGH SCORE : \" + highScore.toString(), 20, 70);\n  requestAnimationFrame(Render);\n}","map":{"version":3,"sources":["C:/Courses/PROG20261/asteroid.io/src/App.js"],"names":["canvas","ctx","canvasWidth","window","innerWidth","canvasHeight","innerHeight","keys","ship","bullets","asteroids","score","lives","highScore","localStorageName","document","addEventListener","SetupCanvas","getElementById","getContext","width","height","fillStyle","fillRect","Ship","i","push","Asteroid","body","HandleKeyDown","HandleKeyUp","localStorage","getItem","Render","e","keyCode","Bullet","angle","constructor","visible","x","y","movingForward","speed","velX","velY","rotateSpeed","radius","strokeColor","noseX","noseY","Rotate","dir","Update","radians","Math","PI","cos","sin","Draw","strokeStyle","beginPath","vertAngle","lineTo","closePath","stroke","level","collisionRadius","floor","random","CircleCollision","p1x","p1y","r1","p2x","p2y","r2","radiusSum","xDiff","yDiff","sqrt","DrawLifeShips","startX","startY","points","moveTo","j","length","clearRect","font","fillText","toString","removeEventListener","asteroid","k","loop1","l","m","splice","max","setItem","requestAnimationFrame"],"mappings":"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","sourcesContent":["let canvas;\r\nlet ctx;\r\nlet canvasWidth = window.innerWidth;\r\nlet canvasHeight = window.innerHeight;\r\nlet keys = [];\r\nlet ship;\r\nlet bullets = [];\r\nlet asteroids = [];\r\nlet score = 0;\r\nlet lives = 3;\r\n\r\nlet highScore;\r\nlet localStorageName = \"HighScore\";\r\n \r\ndocument.addEventListener('DOMContentLoaded', SetupCanvas);\r\n \r\nfunction SetupCanvas(){\r\n    canvas = document.getElementById(\"my-canvas\");\r\n    ctx = canvas.getContext(\"2d\");\r\n    canvas.width = canvasWidth;\r\n    canvas.height = canvasHeight;\r\n    ctx.fillStyle = \"black\";\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    ship = new Ship();\r\n \r\n    for(let i = 0; i < 8; i++){\r\n        asteroids.push(new Asteroid());\r\n    }\r\n \r\n    document.body.addEventListener(\"keydown\", HandleKeyDown);\r\n    document.body.addEventListener(\"keyup\", HandleKeyUp);\r\n \r\n    // Retrieves locally stored high scores\r\n    if (localStorage.getItem(localStorageName) == null) {\r\n        highScore = 0;\r\n    } else {\r\n        highScore = localStorage.getItem(localStorageName);\r\n    }\r\n \r\n    Render();\r\n}\r\n \r\nfunction HandleKeyDown(e){\r\n    keys[e.keyCode] = true;\r\n}\r\nfunction HandleKeyUp(e){\r\n    keys[e.keyCode] = false;\r\n    if (e.keyCode === 32){\r\n        bullets.push(new Bullet(ship.angle));\r\n    }\r\n}\r\n \r\nclass Ship {\r\n    constructor() {\r\n        this.visible = true;\r\n        this.x = canvasWidth / 2;\r\n        this.y = canvasHeight / 2;\r\n        this.movingForward = false;\r\n        this.speed = 0.1;\r\n        this.velX = 0;\r\n        this.velY = 0;\r\n        this.rotateSpeed = 0.001;\r\n        this.radius = 15;\r\n        this.angle = 0;\r\n        this.strokeColor = 'white';\r\n        // Used to know where to fire the bullet from\r\n        this.noseX = canvasWidth / 2 + 15;\r\n        this.noseY = canvasHeight / 2;\r\n    }\r\n    Rotate(dir) {\r\n        this.angle += this.rotateSpeed * dir;\r\n    }\r\n    Update() {\r\n        // Get current direction ship is facing\r\n        let radians = this.angle / Math.PI * 180;\r\n \r\n        // If moving forward calculate changing values of x & y\r\n        // If you want to find the new point x use the \r\n        // formula oldX + cos(radians) * distance\r\n        // Forumla for y oldY + sin(radians) * distance\r\n        if (this.movingForward) {\r\n            this.velX += Math.cos(radians) * this.speed;\r\n            this.velY += Math.sin(radians) * this.speed;\r\n        }\r\n        // If ship goes off board place it on the opposite\r\n        // side    \r\n        if (this.x < this.radius) {\r\n            this.x = canvas.width;\r\n        }\r\n        if (this.x > canvas.width) {\r\n            this.x = this.radius;\r\n        }\r\n        if (this.y < this.radius) {\r\n            this.y = canvas.height;\r\n        }\r\n        if (this.y > canvas.height) {\r\n            this.y = this.radius;\r\n        }\r\n        // Slow ship speed when not holding key\r\n        this.velX *= 0.99;\r\n        this.velY *= 0.99;\r\n \r\n        // Change value of x & y while accounting for\r\n        // air friction    \r\n        this.x -= this.velX;\r\n        this.y -= this.velY;\r\n    }\r\n    Draw() {\r\n        ctx.strokeStyle = this.strokeColor;\r\n        ctx.beginPath();\r\n        // Angle between vertices of the ship\r\n        let vertAngle = ((Math.PI * 2) / 3);\r\n \r\n        let radians = this.angle / Math.PI * 180;\r\n        // Where to fire bullet from\r\n        this.noseX = this.x - this.radius * Math.cos(radians);\r\n        this.noseY = this.y - this.radius * Math.sin(radians);\r\n \r\n        for (let i = 0; i < 3; i++) {\r\n            ctx.lineTo(this.x - this.radius * Math.cos(vertAngle * i + radians), this.y - this.radius * Math.sin(vertAngle * i + radians));\r\n        }\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n}\r\n \r\nclass Bullet{\r\n    constructor(angle) {\r\n        this.visible = true;\r\n        this.x = ship.noseX;\r\n        this.y = ship.noseY;\r\n        this.angle = angle;\r\n        this.height = 4;\r\n        this.width = 4;\r\n        this.speed = 5;\r\n        this.velX = 0;\r\n        this.velY = 0;\r\n    }\r\n    Update(){\r\n        let radians = this.angle / Math.PI * 180;\r\n        this.x -= Math.cos(radians) * this.speed;\r\n        this.y -= Math.sin(radians) * this.speed;\r\n    }\r\n    Draw(){\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(this.x,this.y,this.width,this.height);\r\n    }\r\n}\r\n \r\nclass Asteroid{\r\n    constructor(x,y,radius,level,collisionRadius) {\r\n        this.visible = true;\r\n        this.x = x || Math.floor(Math.random() * canvasWidth);\r\n        this.y = y || Math.floor(Math.random() * canvasHeight);\r\n        this.speed = 1;\r\n        this.radius = radius || 50;\r\n        this.angle = Math.floor(Math.random() * 359);\r\n        this.strokeColor = 'white';\r\n        this.collisionRadius = collisionRadius || 46;\r\n        // Used to decide if this asteroid can be broken into smaller pieces\r\n        this.level = level || 1;  \r\n    }\r\n    Update(){\r\n        let radians = this.angle / Math.PI * 180;\r\n        this.x += Math.cos(radians) * this.speed;\r\n        this.y += Math.sin(radians) * this.speed;\r\n        if (this.x < this.radius) {\r\n            this.x = canvas.width;\r\n        }\r\n        if (this.x > canvas.width) {\r\n            this.x = this.radius;\r\n        }\r\n        if (this.y < this.radius) {\r\n            this.y = canvas.height;\r\n        }\r\n        if (this.y > canvas.height) {\r\n            this.y = this.radius;\r\n        }\r\n    }\r\n    Draw(){\r\n        ctx.beginPath();\r\n        let vertAngle = ((Math.PI * 2) / 6);\r\n        var radians = this.angle / Math.PI * 180;\r\n        for(let i = 0; i < 6; i++){\r\n            ctx.lineTo(this.x - this.radius * Math.cos(vertAngle * i + radians), this.y - this.radius * Math.sin(vertAngle * i + radians));\r\n        }\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n}\r\n \r\nfunction CircleCollision(p1x, p1y, r1, p2x, p2y, r2){\r\n    let radiusSum;\r\n    let xDiff;\r\n    let yDiff;\r\n \r\n    radiusSum = r1 + r2;\r\n    xDiff = p1x - p2x;\r\n    yDiff = p1y - p2y;\r\n \r\n    if (radiusSum > Math.sqrt((xDiff * xDiff) + (yDiff * yDiff))) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n \r\n// Handles drawing life ships on screen\r\nfunction DrawLifeShips(){\r\n    let startX = 1350;\r\n    let startY = 10;\r\n    let points = [[9, 9], [-9, 9]];\r\n    ctx.strokeStyle = 'white'; // Stroke color of ships\r\n    // Cycle through all live ships remaining\r\n    for(let i = 0; i < lives; i++){\r\n        // Start drawing ship\r\n        ctx.beginPath();\r\n        // Move to origin point\r\n        ctx.moveTo(startX, startY);\r\n        // Cycle through all other points\r\n        for(let j = 0; j < points.length; j++){\r\n            ctx.lineTo(startX + points[j][0], \r\n                startY + points[j][1]);\r\n        }\r\n        // Draw from last point to 1st origin point\r\n        ctx.closePath();\r\n        // Stroke the ship shape white\r\n        ctx.stroke();\r\n        // Move next shape 30 pixels to the left\r\n        startX -= 30;\r\n    }\r\n}\r\n \r\nfunction Render() {\r\n    // Check if the ship is moving forward\r\n    ship.movingForward = (keys[87]);\r\n \r\n    if (keys[68]) {\r\n        // d key rotate right\r\n        ship.Rotate(1);\r\n    }\r\n    if (keys[65]) {\r\n        // a key rotate left\r\n       ship.Rotate(-1);\r\n    }\r\n   \r\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n \r\n    // Display score\r\n    ctx.fillStyle = 'white';\r\n    ctx.font = '21px Arial';\r\n    ctx.fillText(\"SCORE : \" + score.toString(), 20, 35);\r\n \r\n    // If no lives signal game over\r\n    if(lives <= 0){\r\n        // If Game over remove event listeners to stop getting keyboard input\r\n        document.body.removeEventListener(\"keydown\", HandleKeyDown);\r\n        document.body.removeEventListener(\"keyup\", HandleKeyUp);\r\n \r\n        ship.visible = false;\r\n        ctx.fillStyle = 'white';\r\n        ctx.font = '50px Arial';\r\n        ctx.fillText(\"GAME OVER\", canvasWidth / 2 - 150, canvasHeight / 2);\r\n    }\r\n \r\n\r\n    if(asteroids.length === 0){\r\n        ship.x = canvasWidth / 2;\r\n        ship.y = canvasHeight / 2;\r\n        ship.velX = 0;\r\n        ship.velY = 0;\r\n        for(let i = 0; i < 8; i++){\r\n            let asteroid = new Asteroid();\r\n            asteroid.speed += .5;\r\n            asteroids.push(asteroid);\r\n        }\r\n    }\r\n \r\n\r\n    DrawLifeShips();\r\n \r\n    // collision of ship with asteroid\r\n    if (asteroids.length !== 0) {\r\n        for(let k = 0; k < asteroids.length; k++){\r\n            if(CircleCollision(ship.x, ship.y, 11, asteroids[k].x, asteroids[k].y, asteroids[k].collisionRadius)){\r\n                ship.x = canvasWidth / 2;\r\n                ship.y = canvasHeight / 2;\r\n                ship.velX = 0;\r\n                ship.velY = 0;\r\n                lives -= 1;\r\n            }\r\n        }\r\n    }\r\n \r\n    //collision with bullet and asteroid\r\n    if (asteroids.length !== 0 && bullets.length != 0){\r\nloop1:\r\n        for(let l = 0; l < asteroids.length; l++){\r\n            for(let m = 0; m < bullets.length; m++){\r\n                if(CircleCollision(bullets[m].x, bullets[m].y, 3, asteroids[l].x, asteroids[l].y, asteroids[l].collisionRadius)){\r\n                    // Check if asteroid can be broken into smaller pieces\r\n                    if(asteroids[l].level === 1){\r\n                        asteroids.push(new Asteroid(asteroids[l].x - 5, asteroids[l].y - 5, 25, 2, 22));\r\n                        asteroids.push(new Asteroid(asteroids[l].x + 5, asteroids[l].y + 5, 25, 2, 22));\r\n                    } else if(asteroids[l].level === 2){\r\n                        asteroids.push(new Asteroid(asteroids[l].x - 5, asteroids[l].y - 5, 15, 3, 12));\r\n                        asteroids.push(new Asteroid(asteroids[l].x + 5, asteroids[l].y + 5, 15, 3, 12));\r\n                    }\r\n                    asteroids.splice(l,1);\r\n                    bullets.splice(m,1);\r\n                    score += 20;\r\n \r\n                    // Used to break out of loops because splicing arrays\r\n                    // you are looping through will break otherwise\r\n                    break loop1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n \r\n    if(ship.visible){\r\n        ship.Update();\r\n        ship.Draw();\r\n    }\r\n    \r\n    if (bullets.length !== 0) {\r\n        for(let i = 0; i < bullets.length; i++){\r\n            bullets[i].Update();\r\n            bullets[i].Draw();\r\n        }\r\n    }\r\n    if (asteroids.length !== 0) {\r\n        for(let j = 0; j < asteroids.length; j++){\r\n            asteroids[j].Update();\r\n            asteroids[j].Draw(j);\r\n        }\r\n    }\r\n\r\n    // Updates the high score using local storage\r\n    highScore = Math.max(score, highScore);\r\n    localStorage.setItem(localStorageName, highScore);\r\n    ctx.font = '21px Arial';\r\n    ctx.fillText(\"HIGH SCORE : \" + highScore.toString(), 20, 70);\r\n \r\n    requestAnimationFrame(Render);\r\n}"]},"metadata":{},"sourceType":"module"}