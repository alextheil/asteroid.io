{"ast":null,"code":"\"use strict\"; // Use codes between 0~127 for lesser throughput (1 byte)\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Protocol;\n\n(function (Protocol) {\n  // Room-related (10~19)\n  Protocol[Protocol[\"HANDSHAKE\"] = 9] = \"HANDSHAKE\";\n  Protocol[Protocol[\"JOIN_ROOM\"] = 10] = \"JOIN_ROOM\";\n  Protocol[Protocol[\"JOIN_ERROR\"] = 11] = \"JOIN_ERROR\";\n  Protocol[Protocol[\"LEAVE_ROOM\"] = 12] = \"LEAVE_ROOM\";\n  Protocol[Protocol[\"ROOM_DATA\"] = 13] = \"ROOM_DATA\";\n  Protocol[Protocol[\"ROOM_STATE\"] = 14] = \"ROOM_STATE\";\n  Protocol[Protocol[\"ROOM_STATE_PATCH\"] = 15] = \"ROOM_STATE_PATCH\";\n  Protocol[Protocol[\"ROOM_DATA_SCHEMA\"] = 16] = \"ROOM_DATA_SCHEMA\";\n})(Protocol = exports.Protocol || (exports.Protocol = {}));\n\nfunction utf8Read(view, offset) {\n  var length = view[offset++];\n  var string = '',\n      chr = 0;\n\n  for (var i = offset, end = offset + length; i < end; i++) {\n    var byte = view[i];\n\n    if ((byte & 0x80) === 0x00) {\n      string += String.fromCharCode(byte);\n      continue;\n    }\n\n    if ((byte & 0xe0) === 0xc0) {\n      string += String.fromCharCode((byte & 0x1f) << 6 | view[++i] & 0x3f);\n      continue;\n    }\n\n    if ((byte & 0xf0) === 0xe0) {\n      string += String.fromCharCode((byte & 0x0f) << 12 | (view[++i] & 0x3f) << 6 | (view[++i] & 0x3f) << 0);\n      continue;\n    }\n\n    if ((byte & 0xf8) === 0xf0) {\n      chr = (byte & 0x07) << 18 | (view[++i] & 0x3f) << 12 | (view[++i] & 0x3f) << 6 | (view[++i] & 0x3f) << 0;\n\n      if (chr >= 0x010000) {\n        // surrogate pair\n        chr -= 0x010000;\n        string += String.fromCharCode((chr >>> 10) + 0xD800, (chr & 0x3FF) + 0xDC00);\n      } else {\n        string += String.fromCharCode(chr);\n      }\n\n      continue;\n    }\n\n    throw new Error('Invalid byte ' + byte.toString(16));\n  }\n\n  return string;\n}\n\nexports.utf8Read = utf8Read; // Faster for short strings than Buffer.byteLength\n\nfunction utf8Length(str) {\n  if (str === void 0) {\n    str = '';\n  }\n\n  var c = 0;\n  var length = 0;\n\n  for (var i = 0, l = str.length; i < l; i++) {\n    c = str.charCodeAt(i);\n\n    if (c < 0x80) {\n      length += 1;\n    } else if (c < 0x800) {\n      length += 2;\n    } else if (c < 0xd800 || c >= 0xe000) {\n      length += 3;\n    } else {\n      i++;\n      length += 4;\n    }\n  }\n\n  return length + 1;\n}\n\nexports.utf8Length = utf8Length;","map":{"version":3,"sources":["C:/Courses/PROG20261/asteroid.io/node_modules/colyseus.js/lib/Protocol.js"],"names":["Object","defineProperty","exports","value","Protocol","utf8Read","view","offset","length","string","chr","i","end","byte","String","fromCharCode","Error","toString","utf8Length","str","c","l","charCodeAt"],"mappings":"AAAA,a,CACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA,IAAIC,QAAJ;;AACA,CAAC,UAAUA,QAAV,EAAoB;AACjB;AACAA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,WAAD,CAAR,GAAwB,CAAzB,CAAR,GAAsC,WAAtC;AACAA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,WAAD,CAAR,GAAwB,EAAzB,CAAR,GAAuC,WAAvC;AACAA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,YAAD,CAAR,GAAyB,EAA1B,CAAR,GAAwC,YAAxC;AACAA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,YAAD,CAAR,GAAyB,EAA1B,CAAR,GAAwC,YAAxC;AACAA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,WAAD,CAAR,GAAwB,EAAzB,CAAR,GAAuC,WAAvC;AACAA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,YAAD,CAAR,GAAyB,EAA1B,CAAR,GAAwC,YAAxC;AACAA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,kBAAD,CAAR,GAA+B,EAAhC,CAAR,GAA8C,kBAA9C;AACAA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,kBAAD,CAAR,GAA+B,EAAhC,CAAR,GAA8C,kBAA9C;AACH,CAVD,EAUGA,QAAQ,GAAGF,OAAO,CAACE,QAAR,KAAqBF,OAAO,CAACE,QAAR,GAAmB,EAAxC,CAVd;;AAWA,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,MAAxB,EAAgC;AAC5B,MAAIC,MAAM,GAAGF,IAAI,CAACC,MAAM,EAAP,CAAjB;AACA,MAAIE,MAAM,GAAG,EAAb;AAAA,MAAiBC,GAAG,GAAG,CAAvB;;AACA,OAAK,IAAIC,CAAC,GAAGJ,MAAR,EAAgBK,GAAG,GAAGL,MAAM,GAAGC,MAApC,EAA4CG,CAAC,GAAGC,GAAhD,EAAqDD,CAAC,EAAtD,EAA0D;AACtD,QAAIE,IAAI,GAAGP,IAAI,CAACK,CAAD,CAAf;;AACA,QAAI,CAACE,IAAI,GAAG,IAAR,MAAkB,IAAtB,EAA4B;AACxBJ,MAAAA,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAoBF,IAApB,CAAV;AACA;AACH;;AACD,QAAI,CAACA,IAAI,GAAG,IAAR,MAAkB,IAAtB,EAA4B;AACxBJ,MAAAA,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAqB,CAACF,IAAI,GAAG,IAAR,KAAiB,CAAlB,GACzBP,IAAI,CAAC,EAAEK,CAAH,CAAJ,GAAY,IADP,CAAV;AAEA;AACH;;AACD,QAAI,CAACE,IAAI,GAAG,IAAR,MAAkB,IAAtB,EAA4B;AACxBJ,MAAAA,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAqB,CAACF,IAAI,GAAG,IAAR,KAAiB,EAAlB,GACzB,CAACP,IAAI,CAAC,EAAEK,CAAH,CAAJ,GAAY,IAAb,KAAsB,CADG,GAEzB,CAACL,IAAI,CAAC,EAAEK,CAAH,CAAJ,GAAY,IAAb,KAAsB,CAFjB,CAAV;AAGA;AACH;;AACD,QAAI,CAACE,IAAI,GAAG,IAAR,MAAkB,IAAtB,EAA4B;AACxBH,MAAAA,GAAG,GAAI,CAACG,IAAI,GAAG,IAAR,KAAiB,EAAlB,GACD,CAACP,IAAI,CAAC,EAAEK,CAAH,CAAJ,GAAY,IAAb,KAAsB,EADrB,GAED,CAACL,IAAI,CAAC,EAAEK,CAAH,CAAJ,GAAY,IAAb,KAAsB,CAFrB,GAGD,CAACL,IAAI,CAAC,EAAEK,CAAH,CAAJ,GAAY,IAAb,KAAsB,CAH3B;;AAIA,UAAID,GAAG,IAAI,QAAX,EAAqB;AAAE;AACnBA,QAAAA,GAAG,IAAI,QAAP;AACAD,QAAAA,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAoB,CAACL,GAAG,KAAK,EAAT,IAAe,MAAnC,EAA2C,CAACA,GAAG,GAAG,KAAP,IAAgB,MAA3D,CAAV;AACH,OAHD,MAIK;AACDD,QAAAA,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAoBL,GAApB,CAAV;AACH;;AACD;AACH;;AACD,UAAM,IAAIM,KAAJ,CAAU,kBAAkBH,IAAI,CAACI,QAAL,CAAc,EAAd,CAA5B,CAAN;AACH;;AACD,SAAOR,MAAP;AACH;;AACDP,OAAO,CAACG,QAAR,GAAmBA,QAAnB,C,CACA;;AACA,SAASa,UAAT,CAAoBC,GAApB,EAAyB;AACrB,MAAIA,GAAG,KAAK,KAAK,CAAjB,EAAoB;AAAEA,IAAAA,GAAG,GAAG,EAAN;AAAW;;AACjC,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIZ,MAAM,GAAG,CAAb;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAR,EAAWU,CAAC,GAAGF,GAAG,CAACX,MAAxB,EAAgCG,CAAC,GAAGU,CAApC,EAAuCV,CAAC,EAAxC,EAA4C;AACxCS,IAAAA,CAAC,GAAGD,GAAG,CAACG,UAAJ,CAAeX,CAAf,CAAJ;;AACA,QAAIS,CAAC,GAAG,IAAR,EAAc;AACVZ,MAAAA,MAAM,IAAI,CAAV;AACH,KAFD,MAGK,IAAIY,CAAC,GAAG,KAAR,EAAe;AAChBZ,MAAAA,MAAM,IAAI,CAAV;AACH,KAFI,MAGA,IAAIY,CAAC,GAAG,MAAJ,IAAcA,CAAC,IAAI,MAAvB,EAA+B;AAChCZ,MAAAA,MAAM,IAAI,CAAV;AACH,KAFI,MAGA;AACDG,MAAAA,CAAC;AACDH,MAAAA,MAAM,IAAI,CAAV;AACH;AACJ;;AACD,SAAOA,MAAM,GAAG,CAAhB;AACH;;AACDN,OAAO,CAACgB,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\n// Use codes between 0~127 for lesser throughput (1 byte)\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Protocol;\n(function (Protocol) {\n    // Room-related (10~19)\n    Protocol[Protocol[\"HANDSHAKE\"] = 9] = \"HANDSHAKE\";\n    Protocol[Protocol[\"JOIN_ROOM\"] = 10] = \"JOIN_ROOM\";\n    Protocol[Protocol[\"JOIN_ERROR\"] = 11] = \"JOIN_ERROR\";\n    Protocol[Protocol[\"LEAVE_ROOM\"] = 12] = \"LEAVE_ROOM\";\n    Protocol[Protocol[\"ROOM_DATA\"] = 13] = \"ROOM_DATA\";\n    Protocol[Protocol[\"ROOM_STATE\"] = 14] = \"ROOM_STATE\";\n    Protocol[Protocol[\"ROOM_STATE_PATCH\"] = 15] = \"ROOM_STATE_PATCH\";\n    Protocol[Protocol[\"ROOM_DATA_SCHEMA\"] = 16] = \"ROOM_DATA_SCHEMA\";\n})(Protocol = exports.Protocol || (exports.Protocol = {}));\nfunction utf8Read(view, offset) {\n    var length = view[offset++];\n    var string = '', chr = 0;\n    for (var i = offset, end = offset + length; i < end; i++) {\n        var byte = view[i];\n        if ((byte & 0x80) === 0x00) {\n            string += String.fromCharCode(byte);\n            continue;\n        }\n        if ((byte & 0xe0) === 0xc0) {\n            string += String.fromCharCode(((byte & 0x1f) << 6) |\n                (view[++i] & 0x3f));\n            continue;\n        }\n        if ((byte & 0xf0) === 0xe0) {\n            string += String.fromCharCode(((byte & 0x0f) << 12) |\n                ((view[++i] & 0x3f) << 6) |\n                ((view[++i] & 0x3f) << 0));\n            continue;\n        }\n        if ((byte & 0xf8) === 0xf0) {\n            chr = ((byte & 0x07) << 18) |\n                ((view[++i] & 0x3f) << 12) |\n                ((view[++i] & 0x3f) << 6) |\n                ((view[++i] & 0x3f) << 0);\n            if (chr >= 0x010000) { // surrogate pair\n                chr -= 0x010000;\n                string += String.fromCharCode((chr >>> 10) + 0xD800, (chr & 0x3FF) + 0xDC00);\n            }\n            else {\n                string += String.fromCharCode(chr);\n            }\n            continue;\n        }\n        throw new Error('Invalid byte ' + byte.toString(16));\n    }\n    return string;\n}\nexports.utf8Read = utf8Read;\n// Faster for short strings than Buffer.byteLength\nfunction utf8Length(str) {\n    if (str === void 0) { str = ''; }\n    var c = 0;\n    var length = 0;\n    for (var i = 0, l = str.length; i < l; i++) {\n        c = str.charCodeAt(i);\n        if (c < 0x80) {\n            length += 1;\n        }\n        else if (c < 0x800) {\n            length += 2;\n        }\n        else if (c < 0xd800 || c >= 0xe000) {\n            length += 3;\n        }\n        else {\n            i++;\n            length += 4;\n        }\n    }\n    return length + 1;\n}\nexports.utf8Length = utf8Length;\n"]},"metadata":{},"sourceType":"script"}